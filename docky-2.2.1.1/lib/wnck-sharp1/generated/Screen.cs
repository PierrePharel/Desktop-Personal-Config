// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Wnck {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Screen]
	public class Screen : GLib.Object {

		public Screen(IntPtr raw) : base(raw) {}

		protected Screen() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BackgroundChangedVMDelegate (IntPtr screen);

		static BackgroundChangedVMDelegate BackgroundChangedVMCallback;

		static void backgroundchanged_cb (IntPtr screen)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnBackgroundChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideBackgroundChanged (GLib.GType gtype)
		{
			if (BackgroundChangedVMCallback == null)
				BackgroundChangedVMCallback = new BackgroundChangedVMDelegate (backgroundchanged_cb);
			OverrideVirtualMethod (gtype, "background_changed", BackgroundChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideBackgroundChanged")]
		protected virtual void OnBackgroundChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("background_changed")]
		public event System.EventHandler BackgroundChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "background_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "background_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WindowStackingChangedVMDelegate (IntPtr screen);

		static WindowStackingChangedVMDelegate WindowStackingChangedVMCallback;

		static void windowstackingchanged_cb (IntPtr screen)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnWindowStackingChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWindowStackingChanged (GLib.GType gtype)
		{
			if (WindowStackingChangedVMCallback == null)
				WindowStackingChangedVMCallback = new WindowStackingChangedVMDelegate (windowstackingchanged_cb);
			OverrideVirtualMethod (gtype, "window_stacking_changed", WindowStackingChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideWindowStackingChanged")]
		protected virtual void OnWindowStackingChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("window_stacking_changed")]
		public event System.EventHandler WindowStackingChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "window_stacking_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "window_stacking_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ViewportsChangedVMDelegate (IntPtr screen);

		static ViewportsChangedVMDelegate ViewportsChangedVMCallback;

		static void viewportschanged_cb (IntPtr screen)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnViewportsChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideViewportsChanged (GLib.GType gtype)
		{
			if (ViewportsChangedVMCallback == null)
				ViewportsChangedVMCallback = new ViewportsChangedVMDelegate (viewportschanged_cb);
			OverrideVirtualMethod (gtype, "viewports_changed", ViewportsChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideViewportsChanged")]
		protected virtual void OnViewportsChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("viewports_changed")]
		public event System.EventHandler ViewportsChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "viewports_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "viewports_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActiveWindowChangedVMDelegate (IntPtr screen, IntPtr previous_window);

		static ActiveWindowChangedVMDelegate ActiveWindowChangedVMCallback;

		static void activewindowchanged_cb (IntPtr screen, IntPtr previous_window)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnActiveWindowChanged (GLib.Object.GetObject(previous_window) as Wnck.Window);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActiveWindowChanged (GLib.GType gtype)
		{
			if (ActiveWindowChangedVMCallback == null)
				ActiveWindowChangedVMCallback = new ActiveWindowChangedVMDelegate (activewindowchanged_cb);
			OverrideVirtualMethod (gtype, "active_window_changed", ActiveWindowChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideActiveWindowChanged")]
		protected virtual void OnActiveWindowChanged (Wnck.Window previous_window)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (previous_window)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("active_window_changed")]
		public event Wnck.ActiveWindowChangedHandler ActiveWindowChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "active_window_changed", typeof (Wnck.ActiveWindowChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "active_window_changed", typeof (Wnck.ActiveWindowChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActiveWorkspaceChangedVMDelegate (IntPtr screen, IntPtr previous_workspace);

		static ActiveWorkspaceChangedVMDelegate ActiveWorkspaceChangedVMCallback;

		static void activeworkspacechanged_cb (IntPtr screen, IntPtr previous_workspace)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnActiveWorkspaceChanged (GLib.Object.GetObject(previous_workspace) as Wnck.Workspace);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActiveWorkspaceChanged (GLib.GType gtype)
		{
			if (ActiveWorkspaceChangedVMCallback == null)
				ActiveWorkspaceChangedVMCallback = new ActiveWorkspaceChangedVMDelegate (activeworkspacechanged_cb);
			OverrideVirtualMethod (gtype, "active_workspace_changed", ActiveWorkspaceChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideActiveWorkspaceChanged")]
		protected virtual void OnActiveWorkspaceChanged (Wnck.Workspace previous_workspace)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (previous_workspace)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("active_workspace_changed")]
		public event Wnck.ActiveWorkspaceChangedHandler ActiveWorkspaceChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "active_workspace_changed", typeof (Wnck.ActiveWorkspaceChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "active_workspace_changed", typeof (Wnck.ActiveWorkspaceChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WindowOpenedVMDelegate (IntPtr screen, IntPtr window);

		static WindowOpenedVMDelegate WindowOpenedVMCallback;

		static void windowopened_cb (IntPtr screen, IntPtr window)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnWindowOpened (GLib.Object.GetObject(window) as Wnck.Window);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWindowOpened (GLib.GType gtype)
		{
			if (WindowOpenedVMCallback == null)
				WindowOpenedVMCallback = new WindowOpenedVMDelegate (windowopened_cb);
			OverrideVirtualMethod (gtype, "window_opened", WindowOpenedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideWindowOpened")]
		protected virtual void OnWindowOpened (Wnck.Window window)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (window)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("window_opened")]
		public event Wnck.WindowOpenedHandler WindowOpened {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "window_opened", typeof (Wnck.WindowOpenedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "window_opened", typeof (Wnck.WindowOpenedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WindowClosedVMDelegate (IntPtr screen, IntPtr window);

		static WindowClosedVMDelegate WindowClosedVMCallback;

		static void windowclosed_cb (IntPtr screen, IntPtr window)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnWindowClosed (GLib.Object.GetObject(window) as Wnck.Window);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWindowClosed (GLib.GType gtype)
		{
			if (WindowClosedVMCallback == null)
				WindowClosedVMCallback = new WindowClosedVMDelegate (windowclosed_cb);
			OverrideVirtualMethod (gtype, "window_closed", WindowClosedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideWindowClosed")]
		protected virtual void OnWindowClosed (Wnck.Window window)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (window)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("window_closed")]
		public event Wnck.WindowClosedHandler WindowClosed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "window_closed", typeof (Wnck.WindowClosedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "window_closed", typeof (Wnck.WindowClosedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ShowingDesktopChangedVMDelegate (IntPtr screen);

		static ShowingDesktopChangedVMDelegate ShowingDesktopChangedVMCallback;

		static void showingdesktopchanged_cb (IntPtr screen)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnShowingDesktopChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideShowingDesktopChanged (GLib.GType gtype)
		{
			if (ShowingDesktopChangedVMCallback == null)
				ShowingDesktopChangedVMCallback = new ShowingDesktopChangedVMDelegate (showingdesktopchanged_cb);
			OverrideVirtualMethod (gtype, "showing_desktop_changed", ShowingDesktopChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideShowingDesktopChanged")]
		protected virtual void OnShowingDesktopChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("showing_desktop_changed")]
		public event System.EventHandler ShowingDesktopChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "showing_desktop_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "showing_desktop_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ApplicationOpenedVMDelegate (IntPtr screen, IntPtr app);

		static ApplicationOpenedVMDelegate ApplicationOpenedVMCallback;

		static void applicationopened_cb (IntPtr screen, IntPtr app)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnApplicationOpened (GLib.Object.GetObject(app) as Wnck.Application);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideApplicationOpened (GLib.GType gtype)
		{
			if (ApplicationOpenedVMCallback == null)
				ApplicationOpenedVMCallback = new ApplicationOpenedVMDelegate (applicationopened_cb);
			OverrideVirtualMethod (gtype, "application_opened", ApplicationOpenedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideApplicationOpened")]
		protected virtual void OnApplicationOpened (Wnck.Application app)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (app)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("application_opened")]
		public event Wnck.ApplicationOpenedHandler ApplicationOpened {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "application_opened", typeof (Wnck.ApplicationOpenedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "application_opened", typeof (Wnck.ApplicationOpenedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClassGroupOpenedVMDelegate (IntPtr screen, IntPtr class_group);

		static ClassGroupOpenedVMDelegate ClassGroupOpenedVMCallback;

		static void classgroupopened_cb (IntPtr screen, IntPtr class_group)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnClassGroupOpened (GLib.Object.GetObject(class_group) as Wnck.ClassGroup);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideClassGroupOpened (GLib.GType gtype)
		{
			if (ClassGroupOpenedVMCallback == null)
				ClassGroupOpenedVMCallback = new ClassGroupOpenedVMDelegate (classgroupopened_cb);
			OverrideVirtualMethod (gtype, "class_group_opened", ClassGroupOpenedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideClassGroupOpened")]
		protected virtual void OnClassGroupOpened (Wnck.ClassGroup class_group)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (class_group)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("class_group_opened")]
		public event Wnck.ClassGroupOpenedHandler ClassGroupOpened {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "class_group_opened", typeof (Wnck.ClassGroupOpenedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "class_group_opened", typeof (Wnck.ClassGroupOpenedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WorkspaceCreatedVMDelegate (IntPtr screen, IntPtr space);

		static WorkspaceCreatedVMDelegate WorkspaceCreatedVMCallback;

		static void workspacecreated_cb (IntPtr screen, IntPtr space)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnWorkspaceCreated (GLib.Object.GetObject(space) as Wnck.Workspace);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWorkspaceCreated (GLib.GType gtype)
		{
			if (WorkspaceCreatedVMCallback == null)
				WorkspaceCreatedVMCallback = new WorkspaceCreatedVMDelegate (workspacecreated_cb);
			OverrideVirtualMethod (gtype, "workspace_created", WorkspaceCreatedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideWorkspaceCreated")]
		protected virtual void OnWorkspaceCreated (Wnck.Workspace space)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (space)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("workspace_created")]
		public event Wnck.WorkspaceCreatedHandler WorkspaceCreated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "workspace_created", typeof (Wnck.WorkspaceCreatedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "workspace_created", typeof (Wnck.WorkspaceCreatedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WindowManagerChangedVMDelegate (IntPtr screen);

		static WindowManagerChangedVMDelegate WindowManagerChangedVMCallback;

		static void windowmanagerchanged_cb (IntPtr screen)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnWindowManagerChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWindowManagerChanged (GLib.GType gtype)
		{
			if (WindowManagerChangedVMCallback == null)
				WindowManagerChangedVMCallback = new WindowManagerChangedVMDelegate (windowmanagerchanged_cb);
			OverrideVirtualMethod (gtype, "window_manager_changed", WindowManagerChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideWindowManagerChanged")]
		protected virtual void OnWindowManagerChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("window_manager_changed")]
		public event System.EventHandler WindowManagerChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "window_manager_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "window_manager_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WorkspaceDestroyedVMDelegate (IntPtr screen, IntPtr space);

		static WorkspaceDestroyedVMDelegate WorkspaceDestroyedVMCallback;

		static void workspacedestroyed_cb (IntPtr screen, IntPtr space)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnWorkspaceDestroyed (GLib.Object.GetObject(space) as Wnck.Workspace);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWorkspaceDestroyed (GLib.GType gtype)
		{
			if (WorkspaceDestroyedVMCallback == null)
				WorkspaceDestroyedVMCallback = new WorkspaceDestroyedVMDelegate (workspacedestroyed_cb);
			OverrideVirtualMethod (gtype, "workspace_destroyed", WorkspaceDestroyedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideWorkspaceDestroyed")]
		protected virtual void OnWorkspaceDestroyed (Wnck.Workspace space)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (space)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("workspace_destroyed")]
		public event Wnck.WorkspaceDestroyedHandler WorkspaceDestroyed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "workspace_destroyed", typeof (Wnck.WorkspaceDestroyedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "workspace_destroyed", typeof (Wnck.WorkspaceDestroyedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ApplicationClosedVMDelegate (IntPtr screen, IntPtr app);

		static ApplicationClosedVMDelegate ApplicationClosedVMCallback;

		static void applicationclosed_cb (IntPtr screen, IntPtr app)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnApplicationClosed (GLib.Object.GetObject(app) as Wnck.Application);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideApplicationClosed (GLib.GType gtype)
		{
			if (ApplicationClosedVMCallback == null)
				ApplicationClosedVMCallback = new ApplicationClosedVMDelegate (applicationclosed_cb);
			OverrideVirtualMethod (gtype, "application_closed", ApplicationClosedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideApplicationClosed")]
		protected virtual void OnApplicationClosed (Wnck.Application app)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (app)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("application_closed")]
		public event Wnck.ApplicationClosedHandler ApplicationClosed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "application_closed", typeof (Wnck.ApplicationClosedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "application_closed", typeof (Wnck.ApplicationClosedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ClassGroupClosedVMDelegate (IntPtr screen, IntPtr class_group);

		static ClassGroupClosedVMDelegate ClassGroupClosedVMCallback;

		static void classgroupclosed_cb (IntPtr screen, IntPtr class_group)
		{
			try {
				Screen screen_managed = GLib.Object.GetObject (screen, false) as Screen;
				screen_managed.OnClassGroupClosed (GLib.Object.GetObject(class_group) as Wnck.ClassGroup);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideClassGroupClosed (GLib.GType gtype)
		{
			if (ClassGroupClosedVMCallback == null)
				ClassGroupClosedVMCallback = new ClassGroupClosedVMDelegate (classgroupclosed_cb);
			OverrideVirtualMethod (gtype, "class_group_closed", ClassGroupClosedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Screen), ConnectionMethod="OverrideClassGroupClosed")]
		protected virtual void OnClassGroupClosed (Wnck.ClassGroup class_group)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				using (var val1 = new GLib.Value (class_group)) {
				inst_and_params.Append (val1);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
				}
			}
		}

		[GLib.Signal("class_group_closed")]
		public event Wnck.ClassGroupClosedHandler ClassGroupClosed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "class_group_closed", typeof (Wnck.ClassGroupClosedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "class_group_closed", typeof (Wnck.ClassGroupClosedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr wnck_screen_get_background_pixmap(IntPtr raw);

		public ulong BackgroundPixmap { 
			get {
				UIntPtr raw_ret = wnck_screen_get_background_pixmap(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern void wnck_screen_force_update(IntPtr raw);

		public void ForceUpdate() {
			wnck_screen_force_update(Handle);
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_screen_get_number(IntPtr raw);

		public int Number { 
			get {
				int raw_ret = wnck_screen_get_number(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern bool wnck_screen_net_wm_supports(IntPtr raw, IntPtr atom);

		public bool NetWmSupports(string atom) {
			IntPtr native_atom = GLib.Marshaller.StringToPtrGStrdup (atom);
			bool raw_ret = wnck_screen_net_wm_supports(Handle, native_atom);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_atom);
			return ret;
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_default();

		public static Wnck.Screen Default { 
			get {
				IntPtr raw_ret = wnck_screen_get_default();
				Wnck.Screen ret = GLib.Object.GetObject(raw_ret) as Wnck.Screen;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_active_window(IntPtr raw);

		public Wnck.Window ActiveWindow { 
			get {
				IntPtr raw_ret = wnck_screen_get_active_window(Handle);
				Wnck.Window ret = GLib.Object.GetObject(raw_ret) as Wnck.Window;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_windows(IntPtr raw);

		public Wnck.Window[] Windows { 
			get {
				IntPtr raw_ret = wnck_screen_get_windows(Handle);
				Wnck.Window[] ret = GLib.Marshaller.ListPtrToArray<Wnck.Window> (raw_ret, typeof(GLib.List), false, false);
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get(int index);

		public static Wnck.Screen Get(int index) {
			IntPtr raw_ret = wnck_screen_get(index);
			Wnck.Screen ret = GLib.Object.GetObject(raw_ret) as Wnck.Screen;
			return ret;
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_screen_try_set_workspace_layout(IntPtr raw, int current_token, int rows, int columns);

		public int TrySetWorkspaceLayout(int current_token, int rows, int columns) {
			int raw_ret = wnck_screen_try_set_workspace_layout(Handle, current_token, rows, columns);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_screen_get_workspace_count(IntPtr raw);

		public int WorkspaceCount { 
			get {
				int raw_ret = wnck_screen_get_workspace_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_workspace(IntPtr raw, int workspace);

		public Wnck.Workspace GetWorkspace(int workspace) {
			IntPtr raw_ret = wnck_screen_get_workspace(Handle, workspace);
			Wnck.Workspace ret = GLib.Object.GetObject(raw_ret) as Wnck.Workspace;
			return ret;
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_workspaces(IntPtr raw);

		public Wnck.Workspace[] Workspaces { 
			get {
				IntPtr raw_ret = wnck_screen_get_workspaces(Handle);
				Wnck.Workspace[] ret = GLib.Marshaller.ListPtrToArray<Wnck.Workspace> (raw_ret, typeof(GLib.List), false, false);
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_window_manager_name(IntPtr raw);

		public string WindowManagerName { 
			get {
				IntPtr raw_ret = wnck_screen_get_window_manager_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_screen_get_width(IntPtr raw);

		public int Width { 
			get {
				int raw_ret = wnck_screen_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_type();

		static GLib.GType _gtype = new GLib.GType (wnck_screen_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_screen_get_height(IntPtr raw);

		public int Height { 
			get {
				int raw_ret = wnck_screen_get_height(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_active_workspace(IntPtr raw);

		public Wnck.Workspace ActiveWorkspace { 
			get {
				IntPtr raw_ret = wnck_screen_get_active_workspace(Handle);
				Wnck.Workspace ret = GLib.Object.GetObject(raw_ret) as Wnck.Workspace;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_windows_stacked(IntPtr raw);

		public Wnck.Window[] WindowsStacked { 
			get {
				IntPtr raw_ret = wnck_screen_get_windows_stacked(Handle);
				Wnck.Window[] ret = GLib.Marshaller.ListPtrToArray<Wnck.Window> (raw_ret, typeof(GLib.List), false, false);
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern void wnck_screen_release_workspace_layout(IntPtr raw, int current_token);

		public void ReleaseWorkspaceLayout(int current_token) {
			wnck_screen_release_workspace_layout(Handle, current_token);
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern void wnck_screen_toggle_showing_desktop(IntPtr raw, bool show);

		public void ToggleShowingDesktop(bool show) {
			wnck_screen_toggle_showing_desktop(Handle, show);
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern void wnck_screen_change_workspace_count(IntPtr raw, int count);

		public void ChangeWorkspaceCount(int count) {
			wnck_screen_change_workspace_count(Handle, count);
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_for_root(UIntPtr root_window_id);

		public static Wnck.Screen GetForRoot(ulong root_window_id) {
			IntPtr raw_ret = wnck_screen_get_for_root(new UIntPtr (root_window_id));
			Wnck.Screen ret = GLib.Object.GetObject(raw_ret) as Wnck.Screen;
			return ret;
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern void wnck_screen_move_viewport(IntPtr raw, int x, int y);

		public void MoveViewport(int x, int y) {
			wnck_screen_move_viewport(Handle, x, y);
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_previously_active_window(IntPtr raw);

		public Wnck.Window PreviouslyActiveWindow { 
			get {
				IntPtr raw_ret = wnck_screen_get_previously_active_window(Handle);
				Wnck.Window ret = GLib.Object.GetObject(raw_ret) as Wnck.Window;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern bool wnck_screen_get_showing_desktop(IntPtr raw);

		public bool ShowingDesktop { 
			get {
				bool raw_ret = wnck_screen_get_showing_desktop(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

#endregion
	}

	internal class ScreenAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_screen_get_type ();

		private static GLib.GType _gtype = new GLib.GType (wnck_screen_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
