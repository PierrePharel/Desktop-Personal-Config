// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Wnck {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Application]
	public class Application : GLib.Object {

		public Application(IntPtr raw) : base(raw) {}

		protected Application() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void IconChangedVMDelegate (IntPtr app);

		static IconChangedVMDelegate IconChangedVMCallback;

		static void iconchanged_cb (IntPtr app)
		{
			try {
				Application app_managed = GLib.Object.GetObject (app, false) as Application;
				app_managed.OnIconChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideIconChanged (GLib.GType gtype)
		{
			if (IconChangedVMCallback == null)
				IconChangedVMCallback = new IconChangedVMDelegate (iconchanged_cb);
			OverrideVirtualMethod (gtype, "icon_changed", IconChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Application), ConnectionMethod="OverrideIconChanged")]
		protected virtual void OnIconChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("icon_changed")]
		public event System.EventHandler IconChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "icon_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "icon_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void NameChangedVMDelegate (IntPtr app);

		static NameChangedVMDelegate NameChangedVMCallback;

		static void namechanged_cb (IntPtr app)
		{
			try {
				Application app_managed = GLib.Object.GetObject (app, false) as Application;
				app_managed.OnNameChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideNameChanged (GLib.GType gtype)
		{
			if (NameChangedVMCallback == null)
				NameChangedVMCallback = new NameChangedVMDelegate (namechanged_cb);
			OverrideVirtualMethod (gtype, "name_changed", NameChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Application), ConnectionMethod="OverrideNameChanged")]
		protected virtual void OnNameChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("name_changed")]
		public event System.EventHandler NameChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "name_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "name_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get_type();

		static GLib.GType _gtype = new GLib.GType (wnck_application_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get_windows(IntPtr raw);

		public Wnck.Window[] Windows { 
			get {
				IntPtr raw_ret = wnck_application_get_windows(Handle);
				Wnck.Window[] ret = GLib.Marshaller.ListPtrToArray<Wnck.Window> (raw_ret, typeof(GLib.List), false, false);
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern bool wnck_application_get_icon_is_fallback(IntPtr raw);

		public bool IconIsFallback { 
			get {
				bool raw_ret = wnck_application_get_icon_is_fallback(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get_icon_name(IntPtr raw);

		public string IconName { 
			get {
				IntPtr raw_ret = wnck_application_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_application_get_pid(IntPtr raw);

		public int Pid { 
			get {
				int raw_ret = wnck_application_get_pid(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_application_get_n_windows(IntPtr raw);

		public int NWindows { 
			get {
				int raw_ret = wnck_application_get_n_windows(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get_mini_icon(IntPtr raw);

		public Gdk.Pixbuf MiniIcon { 
			get {
				IntPtr raw_ret = wnck_application_get_mini_icon(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get(UIntPtr xwindow);

		public static Wnck.Application Get(ulong xwindow) {
			IntPtr raw_ret = wnck_application_get(new UIntPtr (xwindow));
			Wnck.Application ret = GLib.Object.GetObject(raw_ret) as Wnck.Application;
			return ret;
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get_icon(IntPtr raw);

		public Gdk.Pixbuf Icon { 
			get {
				IntPtr raw_ret = wnck_application_get_icon(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr wnck_application_get_xid(IntPtr raw);

		public ulong Xid { 
			get {
				UIntPtr raw_ret = wnck_application_get_xid(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = wnck_application_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get_startup_id(IntPtr raw);

		public string StartupId { 
			get {
				IntPtr raw_ret = wnck_application_get_startup_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

#endregion
	}

	internal class ApplicationAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_application_get_type ();

		private static GLib.GType _gtype = new GLib.GType (wnck_application_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
