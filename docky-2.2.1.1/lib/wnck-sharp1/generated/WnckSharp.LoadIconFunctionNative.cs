// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace WnckSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr LoadIconFunctionNative(IntPtr icon_name, int size, uint flags, IntPtr data);

	internal class LoadIconFunctionInvoker {

		LoadIconFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~LoadIconFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal LoadIconFunctionInvoker (LoadIconFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal LoadIconFunctionInvoker (LoadIconFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal LoadIconFunctionInvoker (LoadIconFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Wnck.LoadIconFunction Handler {
			get {
				return new Wnck.LoadIconFunction(InvokeNative);
			}
		}

		Gdk.Pixbuf InvokeNative (string icon_name, int size, uint flags)
		{
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			Gdk.Pixbuf result = GLib.Object.GetObject(native_cb (native_icon_name, size, flags, __data)) as Gdk.Pixbuf;
			GLib.Marshaller.Free (native_icon_name);
			return result;
		}
	}

	internal class LoadIconFunctionWrapper {

		public IntPtr NativeCallback (IntPtr icon_name, int size, uint flags, IntPtr data)
		{
			try {
				Gdk.Pixbuf __ret = managed (GLib.Marshaller.Utf8PtrToString (icon_name), size, flags);
				if (release_on_call)
					gch.Free ();
				return __ret == null ? IntPtr.Zero : __ret.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal LoadIconFunctionNative NativeDelegate;
		Wnck.LoadIconFunction managed;

		public LoadIconFunctionWrapper (Wnck.LoadIconFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new LoadIconFunctionNative (NativeCallback);
		}

		public static Wnck.LoadIconFunction GetManagedDelegate (LoadIconFunctionNative native)
		{
			if (native == null)
				return null;
			LoadIconFunctionWrapper wrapper = (LoadIconFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
