// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Wnck {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[ActionMenu]
	public class ActionMenu : Gtk.Menu {

		public ActionMenu(IntPtr raw) : base(raw) {}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_action_menu_new(IntPtr window);

		public ActionMenu (Wnck.Window window) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ActionMenu)) {
				var vals = new GLib.Value[1];
				var names = new IntPtr[1];
				var param_count = 0;
				if (window != null) {
					names[param_count] = GLib.Marshaller.StringToPtrGStrdup ("window");
					vals[param_count++] = new GLib.Value (window);
				}
				CreateNativeObject (names, vals, param_count);
				return;
			}
			owned = true;
			Raw = wnck_action_menu_new(window == null ? IntPtr.Zero : window.Handle);
		}

		[GLib.Property ("window")]
		public IntPtr Window {
			get {
				using (GLib.Value val = GetProperty ("window")) {
					IntPtr ret = (IntPtr) val;
					return ret;
				}
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_action_menu_get_type();

		static GLib.GType _gtype = new GLib.GType (wnck_action_menu_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

#endregion
	}

	internal class ActionMenuAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_action_menu_get_type ();

		private static GLib.GType _gtype = new GLib.GType (wnck_action_menu_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
