// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Wnck {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Workspace]
	public class Workspace : GLib.Object {

		public Workspace(IntPtr raw) : base(raw) {}

		protected Workspace() : base(IntPtr.Zero)
		{
			CreateNativeObject (Array.Empty<IntPtr> (), Array.Empty<GLib.Value> (), 0);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void NameChangedVMDelegate (IntPtr space);

		static NameChangedVMDelegate NameChangedVMCallback;

		static void namechanged_cb (IntPtr space)
		{
			try {
				Workspace space_managed = GLib.Object.GetObject (space, false) as Workspace;
				space_managed.OnNameChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideNameChanged (GLib.GType gtype)
		{
			if (NameChangedVMCallback == null)
				NameChangedVMCallback = new NameChangedVMDelegate (namechanged_cb);
			OverrideVirtualMethod (gtype, "name_changed", NameChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Wnck.Workspace), ConnectionMethod="OverrideNameChanged")]
		protected virtual void OnNameChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			using (var val0 = new GLib.Value (this)) {
				inst_and_params.Append (val0);
				g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			}
		}

		[GLib.Signal("name_changed")]
		public event System.EventHandler NameChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "name_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "name_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_workspace_get_layout_row(IntPtr raw);

		public int LayoutRow { 
			get {
				int raw_ret = wnck_workspace_get_layout_row(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_workspace_get_number(IntPtr raw);

		public int Number { 
			get {
				int raw_ret = wnck_workspace_get_number(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_workspace_get_width(IntPtr raw);

		public int Width { 
			get {
				int raw_ret = wnck_workspace_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern void wnck_workspace_change_name(IntPtr raw, IntPtr name);

		public void ChangeName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			wnck_workspace_change_name(Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_workspace_get_viewport_y(IntPtr raw);

		public int ViewportY { 
			get {
				int raw_ret = wnck_workspace_get_viewport_y(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_workspace_get_layout_column(IntPtr raw);

		public int LayoutColumn { 
			get {
				int raw_ret = wnck_workspace_get_layout_column(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_workspace_get_viewport_x(IntPtr raw);

		public int ViewportX { 
			get {
				int raw_ret = wnck_workspace_get_viewport_x(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern void wnck_workspace_activate(IntPtr raw, uint timestamp);

		public void Activate(uint timestamp) {
			wnck_workspace_activate(Handle, timestamp);
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_workspace_get_screen(IntPtr raw);

		public Wnck.Screen Screen { 
			get {
				IntPtr raw_ret = wnck_workspace_get_screen(Handle);
				Wnck.Screen ret = GLib.Object.GetObject(raw_ret) as Wnck.Screen;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_workspace_get_type();

		static GLib.GType _gtype = new GLib.GType (wnck_workspace_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern int wnck_workspace_get_height(IntPtr raw);

		public int Height { 
			get {
				int raw_ret = wnck_workspace_get_height(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_workspace_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = wnck_workspace_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_workspace_get_neighbor(IntPtr raw, int direction);

		public Wnck.Workspace GetNeighbor(Wnck.MotionDirection direction) {
			IntPtr raw_ret = wnck_workspace_get_neighbor(Handle, (int) direction);
			Wnck.Workspace ret = GLib.Object.GetObject(raw_ret) as Wnck.Workspace;
			return ret;
		}

		[DllImport("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern bool wnck_workspace_is_virtual(IntPtr raw);

		public bool IsVirtual { 
			get {
				bool raw_ret = wnck_workspace_is_virtual(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

#endregion
	}

	internal class WorkspaceAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("wnck-1", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr wnck_workspace_get_type ();

		private static GLib.GType _gtype = new GLib.GType (wnck_workspace_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
